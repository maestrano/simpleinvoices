<?php

require_once 'BaseMapper.php';

/**
* Map Connec Payment to/from SimpleInvoices Payment
*
* This class does not map to a model directly. It's a wrapper that links
* Payment > PaymentLines > Transactions to SimpleInvoices payments
*
* In order to achieve that, it delegates all 'save' and 'id map' methods to
* to the PaymentLineMapper which itself delegates these methods to the
* PaymentTransactionMapper.
*
* Graphically, the Connec <-> SimpleInvoices payment mapping looks like this
*
* Connec Payment
*   \- PaymentLine 1
*     \- Transaction 1.1 <---> SI Payment for invoice xxx-1
*     |- Transaction 1.2 <---> SI Payment for invoice xxx-2
*
*   |- PaymentLine 2
*     \- Transaction 2.1 <---> SI Payment for invoice yyy-1
*     |- Transaction 2.2 <---> SI Payment for invoice yyy-2
*
*
* From an IdMap point of view:
* Connec! Transaction is mapped one-to-one with SI payment
* Connec! PaymentLine has many SI transactions (not used, for audit purpose only)
* Connec! Payment has many SI payment_lines (not used, for audit purpose only)
*
* Important Note: this mapper assumes that payment that
* payments will never be edited in SimpleInvoices
*
*/
class PaymentMapper extends BaseMapper {

  public function __construct() {
    parent::__construct();

    $this->connec_entity_name = 'Payment';
    $this->local_entity_name = 'payments';
    $this->connec_resource_name = 'payments';
    $this->connec_resource_endpoint = 'payments';
  }

  // Process only new Payments, payment update is not supported
  protected function validate($cnc_hash) {
    $mno_id_map = MnoIdMap::findMnoIdMapByMnoIdAndEntityName($cnc_hash['id'], $this->connec_entity_name);
    return !$mno_id_map;
  }

  // Return the Customer local id
  protected function getId($model) {
    return $model->id;
  }

  // Fetch a local model by id
  public function loadModelById($local_id) {
    $model = (object) getPayment($local_id);
    return $model;
  }

  // Method override
  // Delegate method to PaymentLineMapper
  // Note: payment_lines are added to the model when mapConnecResourceToModel
  // gets called
  public function findOrCreateIdMap($cnc_hash, $model) {
    if(!$this->is_set($model->payment_lines)){ $model->payment_lines = array(); }

    // For each payment line, delegate method to PaymentLineMapper
    // Payment Line ID is generated by SimpleInvoices, therefore there is no
    // need to pass the connec! hash. Id is already contained in the $payment_line
    foreach($model->payment_lines as $payment_line) {
      $payment_line_mapper = new PaymentLineMapper();
      $payment_line_hash = array('id' => $payment_line->id);
      $payment_line_mapper->findOrCreateIdMap($payment_line_hash,$payment_line);

      // Link the Connec payment to the Connec PaymentLine inside the IdMap so
      // that things can be traced
      MnoIdMap::upsertMnoIdMap($payment_line->id,$payment_line_mapper->connec_entity_name,$cnc_hash['id'],$this->connec_entity_name);
    }
  }

  // Overwritten method
  // The payment is only a virtual object - it's not directly mapped to a model
  // in SimpleInvoices. Model mapping is delegated to the lowest level which is
  // PaymentTransactionMapper.
  protected function initializeNewModel() {
    return (object) array();
  }

  // Map the Connec resource attributes onto the SimpleInvoice Item
  protected function mapConnecResourceToModel($cnc_hash, $model) {
    if(is_null($model->payment_lines)) { $model->payment_lines = array(); }

    // Map payment lines
    foreach($cnc_hash['payment_lines'] as $cnc_line_hash) {
      $payment_line_mapper = new PaymentLineMapper();
      $payment_line = $payment_line_mapper->initializeNewModel();
      $payment_line_mapper->mapConnecResourceToModel($cnc_hash,$payment_line,$cnc_line_hash);
      $model->payment_lines[] = $payment_line;
    }
  }

  // Map a SimpleInvoice payment to a Connec resource hash
  protected function mapModelToConnecResource($model) {
    $cnc_hash = array();

    // Map payment attributes
    if($this->is_set($model->ac_date)) { $cnc_hash['transaction_date'] = date('c',strtotime($model->ac_date)); }
    $cnc_hash['total_amount'] = floatval($model->ac_amount);
    $cnc_hash['public_note'] = $model->ac_notes;
    $cnc_hash['currency'] = $model->currency;

    // Map Payment Method
    if($this->is_set($model->ac_payment_type)) {
      $pymt_type_mapper = new PaymentMethodMapper();
      $pymt_type = $pymt_type_mapper->loadModelById($model->ac_payment_type);
      $mno_id_map = $pymt_type_mapper->findIdMapOrPersist($pymt_type);
      $cnc_hash['payment_method'] = array('id' => $mno_id_map['mno_entity_guid']);
    }

    // Map payment lines
    $payment_line_mapper = new PaymentLineMapper();
    $cnc_hash['payment_lines'] = array(
      $payment_line_mapper->mapModelToConnecResource($model)
    );

    return $cnc_hash;
  }

  // Persist all payment lines attached to the payment
  // Note: payment_lines are added to the model when mapConnecResourceToModel
  // is called
  protected function persistLocalModel($model, $cnc_hash) {
    foreach($model->payment_lines as $payment_line) {
      $payment_line_mapper = new PaymentLineMapper();
      $payment_line_mapper->persistLocalModel($payment_line);
    }
  }
}
